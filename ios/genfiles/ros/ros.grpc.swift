//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: ros.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol RosServiceCommunicateCall: ClientCallBidirectionalStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> ServerToRosCommunication?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<ServerToRosCommunication?>) -> Void) throws

  /// Send a message to the stream. Nonblocking.
  func send(_ message: RosToServerCommunication, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: RosToServerCommunication, timeout: DispatchTime) throws

  /// Call this to close the sending connection. Blocking.
  func closeSend() throws
  /// Call this to close the sending connection. Nonblocking.
  func closeSend(completion: (() -> Void)?) throws
}

internal extension RosServiceCommunicateCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> ServerToRosCommunication? { return try self._receive(timeout: timeout) }
}

internal extension RosServiceCommunicateCall {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: RosToServerCommunication, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class RosServiceCommunicateCallBase: ClientCallBidirectionalStreamingBase<RosToServerCommunication, ServerToRosCommunication>, RosServiceCommunicateCall {
  override class var method: String { return "/RosService/Communicate" }
}

internal protocol RosServiceSendMovementCall: ClientCallUnary {}

fileprivate final class RosServiceSendMovementCallBase: ClientCallUnaryBase<MappingRequest, MappingResponse>, RosServiceSendMovementCall {
  override class var method: String { return "/RosService/SendMovement" }
}

internal protocol RosServiceGetMapImageCall: ClientCallUnary {}

fileprivate final class RosServiceGetMapImageCallBase: ClientCallUnaryBase<GetMapRequest, MapImage>, RosServiceGetMapImageCall {
  override class var method: String { return "/RosService/GetMapImage" }
}

internal protocol RosServiceGetRawMapCall: ClientCallUnary {}

fileprivate final class RosServiceGetRawMapCallBase: ClientCallUnaryBase<GetMapRequest, RawMap>, RosServiceGetRawMapCall {
  override class var method: String { return "/RosService/GetRawMap" }
}

internal protocol RosServiceAddWaypointCall: ClientCallUnary {}

fileprivate final class RosServiceAddWaypointCallBase: ClientCallUnaryBase<AddWaypointRequest, AddWaypointResponse>, RosServiceAddWaypointCall {
  override class var method: String { return "/RosService/AddWaypoint" }
}

internal protocol RosServiceGetNearbyWaypointsCall: ClientCallUnary {}

fileprivate final class RosServiceGetNearbyWaypointsCallBase: ClientCallUnaryBase<GpsCoordinates, WaypointList>, RosServiceGetNearbyWaypointsCall {
  override class var method: String { return "/RosService/GetNearbyWaypoints" }
}

internal protocol RosServiceGetPoseCall: ClientCallUnary {}

fileprivate final class RosServiceGetPoseCallBase: ClientCallUnaryBase<GetPoseRequest, LocalMapPose>, RosServiceGetPoseCall {
  override class var method: String { return "/RosService/GetPose" }
}

internal protocol RosServiceCreateTripCall: ClientCallUnary {}

fileprivate final class RosServiceCreateTripCallBase: ClientCallUnaryBase<CreateTripRequest, CreateTripResponse>, RosServiceCreateTripCall {
  override class var method: String { return "/RosService/CreateTrip" }
}

internal protocol RosServiceGetTripStatusCall: ClientCallUnary {}

fileprivate final class RosServiceGetTripStatusCallBase: ClientCallUnaryBase<GetTripStatusRequest, TripStatus>, RosServiceGetTripStatusCall {
  override class var method: String { return "/RosService/GetTripStatus" }
}

internal protocol RosServiceConfirmTripCall: ClientCallUnary {}

fileprivate final class RosServiceConfirmTripCallBase: ClientCallUnaryBase<ConfirmTripRequest, ConfirmTripResponse>, RosServiceConfirmTripCall {
  override class var method: String { return "/RosService/ConfirmTrip" }
}


/// Instantiate RosServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol RosServiceService: ServiceClient {
  /// Asynchronous. Bidirectional-streaming.
  /// Use methods on the returned object to stream messages,
  /// to wait for replies, and to close the connection.
  func communicate(completion: ((CallResult) -> Void)?) throws -> RosServiceCommunicateCall

  /// Synchronous. Unary.
  func sendMovement(_ request: MappingRequest) throws -> MappingResponse
  /// Asynchronous. Unary.
  func sendMovement(_ request: MappingRequest, completion: @escaping (MappingResponse?, CallResult) -> Void) throws -> RosServiceSendMovementCall

  /// Synchronous. Unary.
  func getMapImage(_ request: GetMapRequest) throws -> MapImage
  /// Asynchronous. Unary.
  func getMapImage(_ request: GetMapRequest, completion: @escaping (MapImage?, CallResult) -> Void) throws -> RosServiceGetMapImageCall

  /// Synchronous. Unary.
  func getRawMap(_ request: GetMapRequest) throws -> RawMap
  /// Asynchronous. Unary.
  func getRawMap(_ request: GetMapRequest, completion: @escaping (RawMap?, CallResult) -> Void) throws -> RosServiceGetRawMapCall

  /// Synchronous. Unary.
  func addWaypoint(_ request: AddWaypointRequest) throws -> AddWaypointResponse
  /// Asynchronous. Unary.
  func addWaypoint(_ request: AddWaypointRequest, completion: @escaping (AddWaypointResponse?, CallResult) -> Void) throws -> RosServiceAddWaypointCall

  /// Synchronous. Unary.
  func getNearbyWaypoints(_ request: GpsCoordinates) throws -> WaypointList
  /// Asynchronous. Unary.
  func getNearbyWaypoints(_ request: GpsCoordinates, completion: @escaping (WaypointList?, CallResult) -> Void) throws -> RosServiceGetNearbyWaypointsCall

  /// Synchronous. Unary.
  func getPose(_ request: GetPoseRequest) throws -> LocalMapPose
  /// Asynchronous. Unary.
  func getPose(_ request: GetPoseRequest, completion: @escaping (LocalMapPose?, CallResult) -> Void) throws -> RosServiceGetPoseCall

  /// Synchronous. Unary.
  func createTrip(_ request: CreateTripRequest) throws -> CreateTripResponse
  /// Asynchronous. Unary.
  func createTrip(_ request: CreateTripRequest, completion: @escaping (CreateTripResponse?, CallResult) -> Void) throws -> RosServiceCreateTripCall

  /// Synchronous. Unary.
  func getTripStatus(_ request: GetTripStatusRequest) throws -> TripStatus
  /// Asynchronous. Unary.
  func getTripStatus(_ request: GetTripStatusRequest, completion: @escaping (TripStatus?, CallResult) -> Void) throws -> RosServiceGetTripStatusCall

  /// Synchronous. Unary.
  func confirmTrip(_ request: ConfirmTripRequest) throws -> ConfirmTripResponse
  /// Asynchronous. Unary.
  func confirmTrip(_ request: ConfirmTripRequest, completion: @escaping (ConfirmTripResponse?, CallResult) -> Void) throws -> RosServiceConfirmTripCall

}

internal final class RosServiceServiceClient: ServiceClientBase, RosServiceService {
  /// Asynchronous. Bidirectional-streaming.
  /// Use methods on the returned object to stream messages,
  /// to wait for replies, and to close the connection.
  internal func communicate(completion: ((CallResult) -> Void)?) throws -> RosServiceCommunicateCall {
    return try RosServiceCommunicateCallBase(channel)
      .start(metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func sendMovement(_ request: MappingRequest) throws -> MappingResponse {
    return try RosServiceSendMovementCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func sendMovement(_ request: MappingRequest, completion: @escaping (MappingResponse?, CallResult) -> Void) throws -> RosServiceSendMovementCall {
    return try RosServiceSendMovementCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getMapImage(_ request: GetMapRequest) throws -> MapImage {
    return try RosServiceGetMapImageCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getMapImage(_ request: GetMapRequest, completion: @escaping (MapImage?, CallResult) -> Void) throws -> RosServiceGetMapImageCall {
    return try RosServiceGetMapImageCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getRawMap(_ request: GetMapRequest) throws -> RawMap {
    return try RosServiceGetRawMapCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getRawMap(_ request: GetMapRequest, completion: @escaping (RawMap?, CallResult) -> Void) throws -> RosServiceGetRawMapCall {
    return try RosServiceGetRawMapCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func addWaypoint(_ request: AddWaypointRequest) throws -> AddWaypointResponse {
    return try RosServiceAddWaypointCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func addWaypoint(_ request: AddWaypointRequest, completion: @escaping (AddWaypointResponse?, CallResult) -> Void) throws -> RosServiceAddWaypointCall {
    return try RosServiceAddWaypointCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getNearbyWaypoints(_ request: GpsCoordinates) throws -> WaypointList {
    return try RosServiceGetNearbyWaypointsCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getNearbyWaypoints(_ request: GpsCoordinates, completion: @escaping (WaypointList?, CallResult) -> Void) throws -> RosServiceGetNearbyWaypointsCall {
    return try RosServiceGetNearbyWaypointsCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getPose(_ request: GetPoseRequest) throws -> LocalMapPose {
    return try RosServiceGetPoseCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getPose(_ request: GetPoseRequest, completion: @escaping (LocalMapPose?, CallResult) -> Void) throws -> RosServiceGetPoseCall {
    return try RosServiceGetPoseCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func createTrip(_ request: CreateTripRequest) throws -> CreateTripResponse {
    return try RosServiceCreateTripCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func createTrip(_ request: CreateTripRequest, completion: @escaping (CreateTripResponse?, CallResult) -> Void) throws -> RosServiceCreateTripCall {
    return try RosServiceCreateTripCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getTripStatus(_ request: GetTripStatusRequest) throws -> TripStatus {
    return try RosServiceGetTripStatusCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getTripStatus(_ request: GetTripStatusRequest, completion: @escaping (TripStatus?, CallResult) -> Void) throws -> RosServiceGetTripStatusCall {
    return try RosServiceGetTripStatusCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func confirmTrip(_ request: ConfirmTripRequest) throws -> ConfirmTripResponse {
    return try RosServiceConfirmTripCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func confirmTrip(_ request: ConfirmTripRequest, completion: @escaping (ConfirmTripResponse?, CallResult) -> Void) throws -> RosServiceConfirmTripCall {
    return try RosServiceConfirmTripCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol RosServiceProvider: ServiceProvider {
  func communicate(session: RosServiceCommunicateSession) throws -> ServerStatus?
  func sendMovement(request: MappingRequest, session: RosServiceSendMovementSession) throws -> MappingResponse
  func getMapImage(request: GetMapRequest, session: RosServiceGetMapImageSession) throws -> MapImage
  func getRawMap(request: GetMapRequest, session: RosServiceGetRawMapSession) throws -> RawMap
  func addWaypoint(request: AddWaypointRequest, session: RosServiceAddWaypointSession) throws -> AddWaypointResponse
  func getNearbyWaypoints(request: GpsCoordinates, session: RosServiceGetNearbyWaypointsSession) throws -> WaypointList
  func getPose(request: GetPoseRequest, session: RosServiceGetPoseSession) throws -> LocalMapPose
  func createTrip(request: CreateTripRequest, session: RosServiceCreateTripSession) throws -> CreateTripResponse
  func getTripStatus(request: GetTripStatusRequest, session: RosServiceGetTripStatusSession) throws -> TripStatus
  func confirmTrip(request: ConfirmTripRequest, session: RosServiceConfirmTripSession) throws -> ConfirmTripResponse
}

extension RosServiceProvider {
  internal var serviceName: String { return "RosService" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/RosService/Communicate":
      return try RosServiceCommunicateSessionBase(
        handler: handler,
        providerBlock: { try self.communicate(session: $0 as! RosServiceCommunicateSessionBase) })
          .run()
    case "/RosService/SendMovement":
      return try RosServiceSendMovementSessionBase(
        handler: handler,
        providerBlock: { try self.sendMovement(request: $0, session: $1 as! RosServiceSendMovementSessionBase) })
          .run()
    case "/RosService/GetMapImage":
      return try RosServiceGetMapImageSessionBase(
        handler: handler,
        providerBlock: { try self.getMapImage(request: $0, session: $1 as! RosServiceGetMapImageSessionBase) })
          .run()
    case "/RosService/GetRawMap":
      return try RosServiceGetRawMapSessionBase(
        handler: handler,
        providerBlock: { try self.getRawMap(request: $0, session: $1 as! RosServiceGetRawMapSessionBase) })
          .run()
    case "/RosService/AddWaypoint":
      return try RosServiceAddWaypointSessionBase(
        handler: handler,
        providerBlock: { try self.addWaypoint(request: $0, session: $1 as! RosServiceAddWaypointSessionBase) })
          .run()
    case "/RosService/GetNearbyWaypoints":
      return try RosServiceGetNearbyWaypointsSessionBase(
        handler: handler,
        providerBlock: { try self.getNearbyWaypoints(request: $0, session: $1 as! RosServiceGetNearbyWaypointsSessionBase) })
          .run()
    case "/RosService/GetPose":
      return try RosServiceGetPoseSessionBase(
        handler: handler,
        providerBlock: { try self.getPose(request: $0, session: $1 as! RosServiceGetPoseSessionBase) })
          .run()
    case "/RosService/CreateTrip":
      return try RosServiceCreateTripSessionBase(
        handler: handler,
        providerBlock: { try self.createTrip(request: $0, session: $1 as! RosServiceCreateTripSessionBase) })
          .run()
    case "/RosService/GetTripStatus":
      return try RosServiceGetTripStatusSessionBase(
        handler: handler,
        providerBlock: { try self.getTripStatus(request: $0, session: $1 as! RosServiceGetTripStatusSessionBase) })
          .run()
    case "/RosService/ConfirmTrip":
      return try RosServiceConfirmTripSessionBase(
        handler: handler,
        providerBlock: { try self.confirmTrip(request: $0, session: $1 as! RosServiceConfirmTripSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol RosServiceCommunicateSession: ServerSessionBidirectionalStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> RosToServerCommunication?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<RosToServerCommunication?>) -> Void) throws

  /// Send a message to the stream. Nonblocking.
  func send(_ message: ServerToRosCommunication, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: ServerToRosCommunication, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension RosServiceCommunicateSession {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> RosToServerCommunication? { return try self._receive(timeout: timeout) }
}

internal extension RosServiceCommunicateSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: ServerToRosCommunication, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class RosServiceCommunicateSessionBase: ServerSessionBidirectionalStreamingBase<RosToServerCommunication, ServerToRosCommunication>, RosServiceCommunicateSession {}

internal protocol RosServiceSendMovementSession: ServerSessionUnary {}

fileprivate final class RosServiceSendMovementSessionBase: ServerSessionUnaryBase<MappingRequest, MappingResponse>, RosServiceSendMovementSession {}

internal protocol RosServiceGetMapImageSession: ServerSessionUnary {}

fileprivate final class RosServiceGetMapImageSessionBase: ServerSessionUnaryBase<GetMapRequest, MapImage>, RosServiceGetMapImageSession {}

internal protocol RosServiceGetRawMapSession: ServerSessionUnary {}

fileprivate final class RosServiceGetRawMapSessionBase: ServerSessionUnaryBase<GetMapRequest, RawMap>, RosServiceGetRawMapSession {}

internal protocol RosServiceAddWaypointSession: ServerSessionUnary {}

fileprivate final class RosServiceAddWaypointSessionBase: ServerSessionUnaryBase<AddWaypointRequest, AddWaypointResponse>, RosServiceAddWaypointSession {}

internal protocol RosServiceGetNearbyWaypointsSession: ServerSessionUnary {}

fileprivate final class RosServiceGetNearbyWaypointsSessionBase: ServerSessionUnaryBase<GpsCoordinates, WaypointList>, RosServiceGetNearbyWaypointsSession {}

internal protocol RosServiceGetPoseSession: ServerSessionUnary {}

fileprivate final class RosServiceGetPoseSessionBase: ServerSessionUnaryBase<GetPoseRequest, LocalMapPose>, RosServiceGetPoseSession {}

internal protocol RosServiceCreateTripSession: ServerSessionUnary {}

fileprivate final class RosServiceCreateTripSessionBase: ServerSessionUnaryBase<CreateTripRequest, CreateTripResponse>, RosServiceCreateTripSession {}

internal protocol RosServiceGetTripStatusSession: ServerSessionUnary {}

fileprivate final class RosServiceGetTripStatusSessionBase: ServerSessionUnaryBase<GetTripStatusRequest, TripStatus>, RosServiceGetTripStatusSession {}

internal protocol RosServiceConfirmTripSession: ServerSessionUnary {}

fileprivate final class RosServiceConfirmTripSessionBase: ServerSessionUnaryBase<ConfirmTripRequest, ConfirmTripResponse>, RosServiceConfirmTripSession {}

