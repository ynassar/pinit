//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: ros.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol RosServiceCommunicateCall: ClientCallBidirectionalStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> ServerToRosCommunication?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<ServerToRosCommunication?>) -> Void) throws

  /// Send a message to the stream. Nonblocking.
  func send(_ message: RosToServerCommunication, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: RosToServerCommunication, timeout: DispatchTime) throws

  /// Call this to close the sending connection. Blocking.
  func closeSend() throws
  /// Call this to close the sending connection. Nonblocking.
  func closeSend(completion: (() -> Void)?) throws
}

internal extension RosServiceCommunicateCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> ServerToRosCommunication? { return try self._receive(timeout: timeout) }
}

internal extension RosServiceCommunicateCall {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: RosToServerCommunication, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class RosServiceCommunicateCallBase: ClientCallBidirectionalStreamingBase<RosToServerCommunication, ServerToRosCommunication>, RosServiceCommunicateCall {
  override class var method: String { return "/RosService/Communicate" }
}

internal protocol RosServiceSendMovementCall: ClientCallUnary {}

fileprivate final class RosServiceSendMovementCallBase: ClientCallUnaryBase<MappingRequest, MappingResponse>, RosServiceSendMovementCall {
  override class var method: String { return "/RosService/SendMovement" }
}


/// Instantiate RosServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol RosServiceService: ServiceClient {
  /// Asynchronous. Bidirectional-streaming.
  /// Use methods on the returned object to stream messages,
  /// to wait for replies, and to close the connection.
  func communicate(completion: ((CallResult) -> Void)?) throws -> RosServiceCommunicateCall

  /// Synchronous. Unary.
  func sendMovement(_ request: MappingRequest) throws -> MappingResponse
  /// Asynchronous. Unary.
  func sendMovement(_ request: MappingRequest, completion: @escaping (MappingResponse?, CallResult) -> Void) throws -> RosServiceSendMovementCall

}

internal final class RosServiceServiceClient: ServiceClientBase, RosServiceService {
  /// Asynchronous. Bidirectional-streaming.
  /// Use methods on the returned object to stream messages,
  /// to wait for replies, and to close the connection.
  internal func communicate(completion: ((CallResult) -> Void)?) throws -> RosServiceCommunicateCall {
    return try RosServiceCommunicateCallBase(channel)
      .start(metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func sendMovement(_ request: MappingRequest) throws -> MappingResponse {
    return try RosServiceSendMovementCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func sendMovement(_ request: MappingRequest, completion: @escaping (MappingResponse?, CallResult) -> Void) throws -> RosServiceSendMovementCall {
    return try RosServiceSendMovementCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol RosServiceProvider: ServiceProvider {
  func communicate(session: RosServiceCommunicateSession) throws -> ServerStatus?
  func sendMovement(request: MappingRequest, session: RosServiceSendMovementSession) throws -> MappingResponse
}

extension RosServiceProvider {
  internal var serviceName: String { return "RosService" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/RosService/Communicate":
      return try RosServiceCommunicateSessionBase(
        handler: handler,
        providerBlock: { try self.communicate(session: $0 as! RosServiceCommunicateSessionBase) })
          .run()
    case "/RosService/SendMovement":
      return try RosServiceSendMovementSessionBase(
        handler: handler,
        providerBlock: { try self.sendMovement(request: $0, session: $1 as! RosServiceSendMovementSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol RosServiceCommunicateSession: ServerSessionBidirectionalStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> RosToServerCommunication?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<RosToServerCommunication?>) -> Void) throws

  /// Send a message to the stream. Nonblocking.
  func send(_ message: ServerToRosCommunication, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: ServerToRosCommunication, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension RosServiceCommunicateSession {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> RosToServerCommunication? { return try self._receive(timeout: timeout) }
}

internal extension RosServiceCommunicateSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: ServerToRosCommunication, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class RosServiceCommunicateSessionBase: ServerSessionBidirectionalStreamingBase<RosToServerCommunication, ServerToRosCommunication>, RosServiceCommunicateSession {}

internal protocol RosServiceSendMovementSession: ServerSessionUnary {}

fileprivate final class RosServiceSendMovementSessionBase: ServerSessionUnaryBase<MappingRequest, MappingResponse>, RosServiceSendMovementSession {}

