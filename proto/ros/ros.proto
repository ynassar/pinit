syntax = "proto3";

import "google/protobuf/timestamp.proto";

service RosService{
    rpc Communicate(stream RosToServerCommunication) returns (stream ServerToRosCommunication){}
    // Initiates bidirectional streaming between the server and the robot.

    rpc SendMovement(MappingRequest) returns (MappingResponse){} 
    // Sends a request for the robot to start or stop mapping, or move in a direction while mapping.

    rpc GetMapImage(GetMapRequest) returns (MapImage) {} 
    // Retrieves a base64 encoded image of a specified robot's map.

    rpc GetRawMap(GetMapRequest) returns (RawMap) {}
    // Retrives a specified robot's RawMap.

    rpc AddWaypoint(AddWaypointRequest) returns (AddWaypointResponse) {}
    // Adds a waypoint at the robot's current location.

    rpc RequestRobotToLocation(RobotNavigationRequest) returns (WaypointList) {}
    // Requests the nearest robot to the specified location and returns a list of
    // waypoints corresponding to the nearest robot.
}

message RobotNavigationRequest{
    string token = 1;
    oneof destination{
        GpsCoordinates coordinates = 2;
        string waypoint_name = 3;
    }
}

message Waypoint{
    string waypoint_name = 1;
    string description = 2;
}

message WaypointList{
    repeated Waypoint waypoints = 1;
}

message AddWaypointRequest{
    string waypoint_name = 1;
    string description = 2;
    string token = 3;
    google.protobuf.Timestamp timestamp = 4;
}

message AddWaypointResponse{
    bool location_stale = 1; // Whether the robot's current location is significantly older than
    // the request. This indicates that the waypoint may have been placed at an unintended location.
}

message GpsCoordinates{
    float longitude = 1;
    float latitude = 2;
}

message LocalMapPose{
    int32 row = 1;
    int32 column = 2;
    float angle = 3;
    google.protobuf.Timestamp timestamp = 4;
}

message ServerToRosNavigationRequest{
    oneof destination{
        LocalMapPose pose = 1;
        GpsCoordinates coordinates = 2;
    }
}

message GetMapRequest{
    oneof robot_specification{
        string robot_name = 1;
        string token = 2;
    }
}

message MapImage{
    float resolution = 1;
    string encoded_image = 2;
}

message RawMap{
    float resolution = 1;
    uint32 height = 2;
    uint32 width = 3;
    bytes data = 4; // Should contain a byte-encoded uint8 numpy array.
    GpsCoordinates origin = 5;
    float origin_angle_shift = 6;
}

message RosToServerCommunication{
    string robot_name = 1; // An identifier for the ros node to send requests to.
    oneof communication{
        RawMap raw_map = 2;
        LocalMapPose robot_pose = 3;
        RobotStatusUpdate status_update = 4;
    }
}

message RobotStatusUpdate{
    enum Status{
        MAPPING = 0;
        IDLE = 1;
        EN_ROUTE = 2;
        ERROR = 3;
    }
    Status status_update = 1;
}

message ServerToRosMappingRequest{
    // Describes a request for mapping to be sent to a recieving ROS node.
    enum MappingRequestType{
        START_MAPPING = 0;
        STOP_MAPPING = 1;
        DIRECTION = 2;
    }
    enum Direction{
        FORWARD = 0;
        BACKWARD = 1;
        RIGHT = 2;
        LEFT = 3;
        STOP = 4;
    }
    MappingRequestType request_type = 1;
    Direction direction = 2;
}

message ServerToRosCommunication{
    oneof communication{
        ServerToRosMappingRequest mapping_request = 1;
        ServerToRosNavigationRequest navigation_request = 2;
    }
}

message MappingRequest{
    // Describes a request for mapping to be sent to the RPC server and
    // forwarded onto a specified ros instance.
    oneof robot_specification{
        string robot_name = 1; // An identifier for the ros node to send requests to.
        string token = 3;
    }
    ServerToRosMappingRequest mapping_request = 2;
}

message MappingResponse{}
